    static string ZwrocTablice(int[] tab, int i = 0)
        {
            if (tab.Length == 0) return "[]";
            if (tab.Length == 1) return "["+tab[0]+"]";
            if (i == 0) return "[" + tab[0] + "," + ZwrocTablice(tab, i + 1);
            if ((i == tab.Length-1)) return tab[i]+"]";
            i++;
            return tab[i-1] + "," + ZwrocTablice(tab, i);
        }
    //===========================================================ZWRÓĆ NIEPARZYSTE===START===============================
    static bool czykoniec1(int[] tab, int i)
        {
                if (tab[i+1] % 2 == 1)return false;
                if(i+1!=tab.Length-1)return czykoniec1(tab,i+1);
                return true;
        }
    static string ZwrocNieparzyste1(int[] tab, int i = 0)
        {
            if (tab.Length == 0) return "[]";
            string p;
            if (i == 0)
            {
                p = "[";
            }
            else p = null;
            if (i == tab.Length - 1 || czykoniec1(tab, i) == true)
            {
                if (tab[i] % 2 != 0)
                    return p + Convert.ToString(tab[i]) + ']';
                else
                    return p + "]";
            }
            else
            {
                if (tab[i] % 2 != 0)
                    return p + Convert.ToString(tab[i]) + ',' + ZwrocNieparzyste1(tab, i + 1);
                else
                    return p + ZwrocNieparzyste1(tab, i + 1);
            }
        }
    //===========================================================ZWRÓĆ NIEPARZYSTE===KONIEC===============================
    static string ZwrocNieparzyste2(int[] tab, int i = 0)
        {
            if (tab.Length == 0 || tab.Length == 1) return "[]";
            i++;
            if (i == tab.Length) if ((i - 1) % 2 == 1) return tab[i - 1] + "]";
            else return "]";
            if (i == tab.Length - 1) if ((i) % 2 == 0) return tab[i - 1]+ZwrocNieparzyste2(tab,i);
                    if (i - 1 == 0) return "[" + ZwrocNieparzyste2(tab,i);
                    if ((i - 1) % 2 == 1) return tab[i-1] + "," + ZwrocNieparzyste2(tab, i);
            return ZwrocNieparzyste2(tab, i);
        }
    //===========================================================ZWRÓĆ PODZIELNE===START===============================
    static bool Czykoniec2(int[] T, int n, int i)
        {
            if(T[i+1]%n==0) return false;
            if(i+1!=T.Length-1) return Czykoniec2(T,n,i+1);
            return true;
        }
    static string ZwrocPodzielne(int[] tab, int n, int i = 0)
        {
            if (tab.Length == 0) return "[]";
            if (tab.Length == 1) if (tab[i] % n == 0) return "[" + tab[i] + "]";
                else return "[]";

            if (i == tab.Length - 1 || Czykoniec2(tab, n, i))
            {
                if (i == 0) if (tab[i] % n == 0) return "[" + tab[i] + "]";
                    else return "[]";
                if (tab[i] % n == 0) return tab[i] + "]";
            }
            else
            {
                if (i == 0) if (tab[i] % n == 0) return "[" + tab[i] + "," + ZwrocPodzielne(tab, n, i + 1);
                    else return "[" + ZwrocPodzielne(tab, n, i + 1);
                if (tab[i] % n == 0) return tab[i] + "," + ZwrocPodzielne(tab, n, i + 1);
                
            }
            return ZwrocPodzielne(tab, n, i + 1);
        }
    //===========================================================ZWRÓĆ PODZIELNE===KONIEC=================================
    static double Pomnoz1(double[] tab, int i = 0)
        {
            if (tab.Length == 0) return 0;
            if(i!=tab.Length-1)return tab[i]*Pomnoz1(tab,i+1);
            return tab[i];
        }
    //===========================================================POMNOZ2===START=================================
    static bool Jest1(double[] tab,int i=1)
        {
            if (tab[i-1] % 3 == 0 || tab[i-1] % 7 == 0) return true;
            if (i != tab.Length) return Jest1(tab,i+1);
            return false;
        }
    static double Pomnoz2(double[] tab, int i = 0)
        {
            if (tab.Length == 0) return 0;
            if (!Jest1(tab,1)) return 0;
            if (i != tab.Length) if (tab[i] % 3 == 0 || tab[i] % 7 == 0) return tab[i] * Pomnoz2(tab, i + 1);
                else return Pomnoz2(tab, i + 1);
            return 1;
        }
    //===========================================================POMNOZ2===KONIEC=================================
    static double Pomnoz3(double[] tab, int i = 0)
        {
            if (tab.Length == 0 || tab.Length == 1) return 0;
            if (i != tab.Length) if (i % 3 != 0) return tab[i] * Pomnoz3(tab, i + 1);
                else return Pomnoz3(tab, i + 1);
            return 1;
        }
    static bool CzyJest(int[] tab, int n, int i = 0)
        {
            if (tab.Length == 0) return false;
            if (i != tab.Length) if (tab[i] % n == 0) return true;
                else return CzyJest(tab, n, i + 1);
            return false;
        }
